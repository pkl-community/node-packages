name: Publish npm binary packages

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'pkl release tag'
        required: true
        type: string
      versionSuffix:
        description: 'suffix for npm version, eg -1'
        required: false
        default: ''
        type: string

jobs:
  publish-npm-binaries:
    permissions:
      contents: read
      packages: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build:
          - target: macos-aarch64
            node_arch: arm64
            node_os: darwin
          - target: macos-amd64
            node_arch: x64
            node_os: darwin
          - target: alpine-linux-amd64
            node_arch: x64
            node_os: linux
          - target: linux-aarch64 # TODO; no alpine aarch64 binaries yet
            node_arch: arm64
            node_os: linux
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - uses: actions/setup-node@v5
        with:
          node-version: "18.x"
          registry-url: 'https://registry.npmjs.org'

      - name: Download binary from pkl releases
        run: |
          curl --fail -Lo binaries/pkl https://github.com/apple/pkl/releases/download/${{ inputs.version }}/pkl-${{ matrix.build.target }}
          chmod +x binaries/pkl

      - name: Download NOTICE.txt
        run: curl --fail -Lo binaries/NOTICE.txt https://raw.githubusercontent.com/apple/pkl/${{ inputs.version }}/NOTICE.txt

      - name: Download LICENSE.txt
        run: curl --fail -Lo binaries/LICENSE.txt https://raw.githubusercontent.com/apple/pkl/${{ inputs.version }}/LICENSE.txt

      - name: Publish to NPM
        shell: bash
        run: |
          cd binaries
          
          # set the os
          node_os="${{ matrix.build.node_os }}"
          export node_os
          
          # set the arch
          export node_arch="${{ matrix.build.node_arch }}"
          export node_arch
          
          # set the version
          node_version="${{ inputs.version }}${{ inputs.versionSuffix }}"
          node_version="${node_version#v}"
          export node_version
          
          # set the package name
          export node_pkg="pkl-${node_os}-${node_arch}"
          
          # skip if exists
          if npm view "@pkl-community/${node_pkg}@${node_version}"
          then
            exit 0
          fi
          
          # create the package directory
          mkdir -p "${node_pkg}/bin"
          # generate package.json from the template
          envsubst < package.json.tmpl > "${node_pkg}/package.json"

          # copy the binary into the package
          cp "pkl" "${node_pkg}/bin"
          cp NOTICE.txt "${node_pkg}"
          cp LICENSE.txt "${node_pkg}"
          cp ../README.md "${node_pkg}"

          # publish the package
          pushd "${node_pkg}"
          npm publish --access public
          popd
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-npm-base:
    needs: publish-npm-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - uses: actions/setup-node@v5
        with:
          node-version: "18.x"
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        shell: bash
        run: |
          node_version="${{ inputs.version }}${{ inputs.versionSuffix }}"
          node_version="${node_version#v}"
          
          cd pkl
          
          if npm view "@pkl-community/pkl@${node_version}"
          then
            continue
          fi
          
          sed -i "s/\"version\": \".*\",/\"version\": \"${node_version}\",/" package.json
          for os in linux darwin
          do
            for arch in x64 arm64
            do
              sed -i "s|\"@pkl-community/pkl-${os}-${arch}\": \".*\"|\"@pkl-community/pkl-${os}-${arch}\": \"${node_version}\"|" package.json
            done
          done
          cp ../README.md README.md
          npm install
          npm run build
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
